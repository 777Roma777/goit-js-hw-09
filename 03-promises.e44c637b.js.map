{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAE9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAkC3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA1CPR,EAAKgB,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAEF,IAAIC,EAAeC,OAAOjB,EAAWkB,OACjCC,EAAOF,OAAOhB,EAAUiB,OACxBE,EAASH,OAAOf,EAAYgB,OAGhC,GAAIF,EAAe,GAAKG,EAAO,GAAKC,GAAU,EAErB,YADvBC,EAAA1B,GAAS2B,OAAOC,QAAQ,gCAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,IAChBA,EACXrB,EAAcqB,EAAGR,EAAeG,EAAOK,GACpCC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBgB,EAAA1B,GAAS2B,OAAOK,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAH,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBgB,EAAA1B,GAAS2B,OAAOC,QACd,sBAAqCK,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  let initialDelay = Number(delayInput.value);\n  let step = Number(stepInput.value);\n  let amount = Number(amountInput.value);\n  let position = 0;\n\n  if (initialDelay < 0 || step < 0 || amount <= 0) {\n    Notiflix.Notify.failure('Значення мають бути більше 0');\n    return; // Додайте цей рядок, щоб зупинити виконання коду при помилці\n  }\n\n  for (let i = 1; i <= amount; i++) {\n    position = i;\n    createPromise(i, initialDelay + step * i)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  // form.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","initialDelay","Number","value","step","amount","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.e44c637b.js.map"}